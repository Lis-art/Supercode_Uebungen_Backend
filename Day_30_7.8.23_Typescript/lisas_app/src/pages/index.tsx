import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'

import { SetStateAction, Dispatch, useState, useEffect } from 'react'
import axios from 'axios'

type Todo = {
  userId: number
  id: number
  title: string
  completed: boolean
};

const inter = Inter({ subsets: ['latin'] })

export default function Home() {
  const [count, setCount] = useState(0);
  const [todos, setTodos] = useState<Todo[]>([]);
  // state soll todo array repräsentieren (<Todo[]>)

  useEffect(()=>{
    // <Todo[]> setzt den typen vom rückgabewert auf array
    axios.get<Todo[]>("https://jsonplaceholder.typicode.com/todos").then((resp)=>{
      setTodos(resp.data)
    })
  },[])

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <div>
        <Button count={count} setCount={setCount} label="WOW so much"/>

        </div>
        <div>
          {todos.map((todo) => (
            <div key={todo.id}>
              <p>{todo.title}</p>
              <small>from user: {todo.userId}</small>
            </div>
          ))}
        </div>
      </main>
    </>
  )
}

// wir müssen erst deklarieren was die props von dieser componente sind weil typescript count noch nicht kennt
// das machen wir über den type den wir uns zusammen bauen
// im Anschluss übergeben wir dann den type als prop
// im main übergeben wir dann den Button mit den beiden Properties
// dannn wird label als property definiert welches man dynamisch übergeben kann -> diese property muss dann immer mit angegeben werden
// durch das ? und (label || "Count") geben wir einen default wert mit wenn label nicht definiert ist also string oder undefined, so entsteht kein error



type ButtonProps = {
  count: number;
  setCount: Dispatch<SetStateAction<number>>;
  label?: string;
}

const Button = ({count, setCount, label}: ButtonProps) => {
  return(
    <button onClick={() => setCount((prevCount) => prevCount+1)}>
    {label || "Count" }:{count}
  </button>
  )
}
